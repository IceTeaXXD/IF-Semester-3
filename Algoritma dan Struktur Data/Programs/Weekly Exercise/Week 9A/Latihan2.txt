{ DEKLARASI TIPE }
type ElType : integer
type Address : pointer to Node
type Node : < info : ElType,
              next : Address >
type List : Address

procedure deleteNeg (input/output l : list)
{ Menghapus semua elemen bernilai negatif pada sebuah list of integer l.
  List l boleh kosong dan setiap elemen yang dihapus harus dilakukan dealokasi.}

{ ALTERNATIF 1 }
{ KAMUS LOKAL }
var
   p, q     : address
   idxNeg   : integer
   val      : ElType

{ ALGORITMA }
    p <- l;
    while (p != NIL) do
        if (p^.info < 0) then
            idxNeg <- indexOf(l, p^.info)
            deleteAt(l,idx,val)
        p <- p^.next

{ ALTERNATIF 2 }
{ KAMUS LOKAL }
    P, P1 : Address

{ ALGORITMA }
    P1 <- NIL
    P <- First(L)
    while (P != Nil) do
        if (Info(P) < 0) then
            if (P1 = NIL) then
                First (L) <- Next (P)
                Dealokasi(P)
                P <- First(L)
            else
                Next(P1) <- Next(P)
                Dealokasi(P)
                P <- Next(P1)
        else
            P1 <- P
            P <- Next (P1)

procedure copyPos(input l1 : List, output l2 : List)
{ Menyalin semua elemen bernilai positif dari sebua list of integer l1 menjadi l2}

{ KAMUS LOKAL }
   p : address

{ ALGORITMA }
    if (l1 != NIL) then
        p <- l1;
        while (p != NIL) do
            if (p^.info > 0) then
                insertLast(l2, p^.info)
            p <- p^.next

procedure sortedInsert (input/output l : List, input x : ElType)
{ Menambahkan sebuah elemen x pada sebuah list of integer l yang terurut menaik }
    
{ KAMUS LOKAL }
   p : address;

{ ALGORITMA }
    if (l = NIL) then
        inserFirst(l, x)
    else if (l^.info > x) then
        inserFirst(l, x)
    else
        p <- l
        while (p^.next != NIL) AND (p^.next^.info <  x) do
            p <- p^.next
        insertAt(p,x)